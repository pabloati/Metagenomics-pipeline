#!/usr/bin/env python
# set configurations
PROJECT = 'cu_10168'

import os
from snakemake.exceptions import MissingInputException

FASTP = "module load fastp/0.23.2; fastp"
BOWTIE2 = "module load tools bowtie2/2.4.2; bowtie2"
MULTIQC = "module load multiqc/1.12; multiqc"

# set configurations
W_DIR = config.get("work_dir")
SAMPLE_DATA = config.get("sample_data")
PATH_RAW_READS = config.get("path_to_raw_reads")
BT2_IDX = config.get("bt2-idx")

# read in sample_id_plus_data.txt
IDS = []
raw_reads = {}
fh_in = open(SAMPLE_DATA, 'r')
for line in fh_in:
    line = line.rstrip()
    fields = line.split('\t')
    IDS.append(fields[0].split('_')[0])
    raw_reads[fields[0].split('_')[0]]= [W_DIR+PATH_RAW_READS+"/{id}_A/"+fields[1],W_DIR+PATH_RAW_READS+$


rule all:
    input:
	expand('results/fastp_reads/{id}/{id}_R1.fq.gz', id = IDS),
        expand('results/fastp_reads/{id}/{id}_R2.fq.gz', id = IDS),
        expand('results/qc_files/fastp_html/{id}.fastp.html', id = IDS),
        expand('results/qc_files/fastp_json/{id}.fastp.json', id = IDS),
        "results/qc_files/multiqc_fastp_report.html",
        expand('results/bowtie_human/{id}_mapped_and_unmapped.sam', id = IDS),
        expand('results/microbe_reads/{id}.PE_Bowtie.vs_hr_1.fq.gz', id = IDS),
        expand('results/microbe_reads/{id}.PE_Bowtie.vs_hr_2.fq.gz', id = IDS),


rule fastp:
    input:
	      r1 = lambda wildcards: raw_reads[wildcards.id][0],
        r2 = lambda wildcards: raw_reads[wildcards.id][1]
    output:
	      r1 = 'results/fastp_reads/{id}/{id}_R1.fq.gz',
        r2 = 'results/fastp_reads/{id}/{id}_R2.fq.gz',
        html = 'results/qc_files/fastp_html/{id}.fastp.html',
        json = 'results/qc_files/fastp_json/{id}.fastp.json',
    params:
        walltime="3600",
        nodes="1",
        ppn="4",
        mem="16gb",
        project=PROJECT,
        qsub_log_e="logs/qsub/fastp_{id}.e",
        qsub_log_o="logs/qsub/fastp_{id}.o",
    threads: 8
    log: "logs/fastp_log/{id}"
    priority: 0
    shell:
	"set +o pipefail; mkdir -p results/fastp_reads/{wildcards.id} ;"
        "{FASTP} --in1 {input.r1} --in2 {input.r2} "
        "--out1 {output.r1} --out2 {output.r2} "
        "--trim_front1 15 --trim_tail1 2 --trim_front2 15 --trim_tail2 2 --cut_right --cut_right_window_$
        "--html {output.html} --json {output.json} --report_title {wildcards.id} --thread {threads} --tr$

rule multiqc:
    input:
	"results/qc_files/fastp_json"
    output:
	"results/qc_files/multiqc_fastp_report.html"
  params:
	fastp_dir = "results/qc_files/fastp_json/",
        in_dir = "results/qc_files/fastp_json",
        out_dir = "results/qc_files",
        walltime="1200", nodes="1", ppn="4", mem="5gb", project=PROJECT,
        qsub_log_e="logs/qsub/fastp_multiqc.e",
        qsub_log_o="logs/qsub/fastp_multiqc.o",
    log: "logs/multiqc_fastp"
    priority: 0
    shell:
        "{MULTIQC} -b 'Report generated by KNN' -o {params.out_dir} {params.fastp_dir}"

rule mapping:
    input:
        r1 = 'results/fastp_reads/{id}/{id}_R1.fq.gz',
        r2 = 'results/fastp_reads/{id}/{id}_R2.fq.gz'
    output:
        sam = 'results/bowtie_human/{id}_mapped_and_unmapped.sam',
        r1 = 'results/microbe_reads/{id}.PE_Bowtie.vs_hr_1.fq.gz',
        r2 = 'results/microbe_reads/{id}.PE_Bowtie.vs_hr_2.fq.gz'
    params:
        walltime="7200",
        nodes="1",
	ppn="8",
        mem="16gb",
	project=PROJECT,
        qsub_log_e="logs/qsub/bowtie_{id}.e",
	qsub_log_o="logs/qsub/bowtie_{id}.o",
        out="results/microbe_reads/{id}.PE_Bowtie.vs_hr_%.fq.gz"
    threads: 8
    log: "logs/bowtie/{id}_PE"
    shell:
        """
        {BOWTIE2} -p {threads} --very-sensitive \
        -x {BT2_IDX} \
        -1 {input.r1} \
        -2 {input.r2} \
        --un-conc-gz {params.out} \
        > {output.sam} \
        2> {log}
        """
